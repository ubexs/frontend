"use strict";function _createForOfIteratorHelper(a,b){var c;if("undefined"==typeof Symbol||null==a[Symbol.iterator]){if(Array.isArray(a)||(c=_unsupportedIterableToArray(a))||b&&a&&"number"==typeof a.length){c&&(a=c);var d=0,e=function(){};return{s:e,n:function n(){return d>=a.length?{done:!0}:{done:!1,value:a[d++]}},e:function e(a){throw a},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var f,g=!0,h=!1;return{s:function s(){c=a[Symbol.iterator]()},n:function n(){var a=c.next();return g=a.done,a},e:function e(a){h=!0,f=a},f:function f(){try{g||null==c["return"]||c["return"]()}finally{if(h)throw f}}}}function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return _arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return"Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(a):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?_arrayLikeToArray(a,b):void 0}}function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}var groupdata=$("#metadata-for-group"),groupId=groupdata.attr("data-groupid");$(document).on("click","#update-group-status",function(a){a.preventDefault(),loading();var b=parseInt($("#group-status").val(),10),c=$("#new-status-reason").val();request("/staff/groups/"+groupId+"/status","PATCH",{status:b,reason:c}).then(function(){success("This group's status has been updated.")})["catch"](function(a){warning(a.responseJSON.message)})}),$(document).on("click","#update-group-name",function(a){a.preventDefault(),loading();var b=$("#new-name").val(),c=$("#new-name-reason").val();request("/staff/groups/"+groupId+"/name","PATCH",{name:b,reason:c}).then(function(){success("This group's name has been updated.",function(){window.location.reload()})})["catch"](function(a){warning(a.responseJSON.message)})});var statusToName={0:"Unlocked",1:"Locked"};function loadStatusLogs(){request("/staff/groups/".concat(groupId,"/status?limit=100&offset=0"),"GET").then(function(a){var b=a.data,c=$("#status-update-logs");if(0===b.length)return c.append("<p>This group has not had its status updated.</p>");var d,e=[],f=_createForOfIteratorHelper(b);try{for(f.s();!(d=f.n()).done;){var g=d.value;e.push(g.userId),c.append("\n            <div class=\"row\">\n                <div class=\"col-4\">\n                    <p class=\"text-truncate\"><a href=\"/users/".concat(g.userId,"/profile\"><span data-userid=\"").concat(g.userId,"\">Loading...</span></a></p>\n                </div>\n                <div class=\"col-4\">\n                    <p><span class=\"font-weight-bold\">").concat(statusToName[g.oldStatus],"</span> to <span class=\"font-weight-bold\">").concat(statusToName[g.newStatus],"</span></p>\n                    <p>Reason: &quot;").concat(g.reason,"&quot;</p>\n                </div>\n                <div class=\"col-4\">\n                    <p class=\"text-truncate\">").concat(moment(g.createdAt).format("DD MMM YYYY")," (").concat(moment(g.createdAt).fromNow(),")</p>\n                </div>\n                <div class=\"col-12\">\n                    <hr />\n                </div>\n            </div>\n            \n            "))}}catch(a){f.e(a)}finally{f.f()}setUserNames(e)})["catch"](function(){})}loadStatusLogs();function loadNameLogs(){request("/staff/groups/".concat(groupId,"/name?limit=100&offset=0"),"GET").then(function(a){var b=a.data,c=$("#name-update-logs");if(0===b.length)return c.append("<p>This group has not had its name updated.</p>");var d,e=[],f=_createForOfIteratorHelper(b);try{for(f.s();!(d=f.n()).done;){var g=d.value;e.push(g.userId),c.append("\n            <div class=\"row\">\n                <div class=\"col-4\">\n                    <p class=\"text-truncate\"><a href=\"/users/".concat(g.userId,"/profile\"><span data-userid=\"").concat(g.userId,"\">Loading...</span></a></p>\n                </div>\n                <div class=\"col-4\">\n                    <p><span class=\"font-weight-bold\">&quot;").concat(g.oldName,"&quot;</span> <i class=\"fas fa-angle-right\"></i> <span class=\"font-weight-bold\">&quot;").concat(g.newName,"&quot;</span></p>\n                    <p>Reason: &quot;").concat(g.reason,"&quot;</p>\n                </div>\n                <div class=\"col-4\">\n                    <p class=\"text-truncate\">").concat(moment(g.createdAt).format("DD MMM YYYY")," (").concat(moment(g.createdAt).fromNow(),")</p>\n                </div>\n                <div class=\"col-12\">\n                    <hr />\n                </div>\n            </div>\n            \n            "))}}catch(a){f.e(a)}finally{f.f()}setUserNames(e)})["catch"](function(){})}loadNameLogs();